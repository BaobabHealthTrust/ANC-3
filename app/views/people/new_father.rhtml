<script type="text/javascript" language="javascript" src="/javascripts/multi_column_controls.js" defer  ></script>

<style>

  .tt_controls_year_of_birth #qwerty { display:none; }
  .tt_controls_age_estimate #qwerty { display:none; }
  .tt_controls_cell_phone_number #qwerty { display:none; }
  .tt_controls_ground_phone_number #qwerty { display:none; }
  .tt_controls_office_phone_number #qwerty { display:none; }

  .tt_controls_year_of_birth #Unknown { display:block; }
  .tt_controls_age_estimate #Unknown { display:none; }

  .tt_controls_father_year_of_birth #Unknown { display:block; }

  .tt_controls_middle_name  #na { display: block; }
  .tt_controls_ground_phone_number #Unknown { display:block; }

  .tt_controls_region_of_origin .keyboard{display:none;}
  .tt_controls_current_region .keyboard{display:none;}



  .tt_controls_home_village #space , #apostrophe { display:inline; }
  .tt_controls_home_district #num  { display:none; }

  .tt_controls_current_traditional_authority_ta #space { display:inline; }

  .tt_controls_current_village_residence #space { display:inline; }

  .tt_controls_cell_phone_number #num , #plus, #apostrophe, #star, #char, #abc, #date, #slash, #minus, #comma, #percent, #decimal { display:none; }

  .tt_controls_home_phone_number #num , #plus, #apostrophe, #star, #abc, #date, #slash, #minus, #comma, #percent, #decimal { display:none; }

  .tt_controls_office_phone_number #num , #plus, #apostrophe, #star, #abc, #date, #slash, #minus, #comma, #percent, #decimal { display:none; }

  .tt_controls_occupation .keyboard{display:none;}
  #tt_page_occupation .options{height:500px;}
  #tt_page_occupation .options li{font-size:30px;}
  #space {display:inline;}

  .nota #na {
    display: block;
  }

  #num{ display:block; }
  #char{ display:none; }
  #apostrophe { display:inline; }

  .tt_controls_home_district #num{ display:none; }
  .tt_controls_current_district #num{ display:none; }

  .tt_controls_current_city_place_or_area_of_residence #num{ display:block; }
  .tt_controls_current_city_place_or_area_of_residence #char{ display:block; }

  .tt_controls_closest_landmark_or_plot_number #num{ display:block; }
  .tt_controls_closest_landmark_or_plot_number #char{ display:block; }

  .azButton .numericKeyboard #char {
    display: block;
  }
  li.highlighted {
    background-color: lightblue;
  }
  li {
    /*padding: 5px;*/
    cursor: pointer;
    font-size: 1.5em;
    margin: 2px;
    -moz-user-select: none;
  }


</style>

<script>
  var value = "";
  var values_hash = {};
  selectAll = false;
<% if params[:relation] %>
    var tt_cancel_destination = "/patients/relationships?patient_id=<%=h params[:relation] -%>"
<% else %>
    var tt_cancel_destination = "/clinic"
<% end %>

  var dob_year = null ; var dob_month = null ; dob_day = null;
  var set_dob = null;

  var skipped = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

  function showNext(){
    __$("nextButton").style.display = "block";
  }

  function hideNext(){
    __$("nextButton").style.display = "none";
  }


  function seen(page) {
    for (var i = page; i >= 0; i--) {
      skipped[i] = 1;
    }
  }

  function setDOB() {
    try {
      dob_year = document.getElementById('tt_page_year_of_birth').getElementsByTagName("input")[0].value
    }catch(e){ dob_year = dob_year }
    try {
      dob_month = document.getElementById('tt_page_month_of_birth').getElementsByTagName("input")[0].getAttribute('tstvalue')
      if (dob_month.length == 1)
        dob_month = 0 + dob_month
    }catch(e){ dob_month = dob_month }
    try {
      dob_day = document.getElementById('tt_page_birth_day').getElementsByTagName("input")[0].value
      if (dob_day.length == 1)
        dob_day = 0 + dob_day
    }catch(e){ dob_day = dob_day }

    set_dob = (dob_year + '-' + dob_month + '-' + dob_day)
    return true
  }

  function validateDOB() {
    setDOB();
    curr_date = new Date();

    if (dateCreate(set_dob) == 'Invalid Date') {
      if (set_dob.split('-')[1] == 'Unknown')
        return true

      if (curr_date.getFullYear() == parseInt(dob_year)) {
        if ((curr_date.getMonth() + 1) < parseInt(dob_month)){
          if (document.getElementById('tt_page_month_of_birth') != null)
            return true

          return false
        }
      }

      if (dob_month == 'Unknown'){
        if (curr_date.getFullYear() == parseInt(dob_year)) {
          if ((curr_date.getMonth() + 1) < parseInt(dob_month))
            return false
        }
      }
    }else{
      if (document.getElementById('tt_page_month_of_birth') != null)
        return true

      if (curr_date < dateCreate(set_dob))
        return false
    }
    return true
  }

  function dateCreate(date_str){
    intyear = 0 ; intmonth = 0 ; intday = 0;
    intyear = parseInt(date_str.substring(0,4))
    intmonth = (parseInt(date_str.substring(5,7)) - 1)

    if (intmonth == -1)
      intmonth = (parseInt(date_str.substring(5,7).substring(1,2)) - 1)

    if (intday == 0)
      intday = parseInt(date_str.substring(8,10).substring(1,2))

    return new Date(intyear,intmonth,intday);
  }

  function set_ajaxURL_for_suggestions(url, filter_value) {
    $('touchscreenInput'+tstCurrentPage).setAttribute('ajaxURL', url + filter_value + "&search_string=");
    listSuggestions(tstCurrentPage);
  }
  function ajaxify(cat, selected){

    if (cat.trim() == "region" && selected != "Other" && !selected.match(/region/)){
      var url = "/people/districts_for?filter_value=" + selected + "&search_string=";
      ajaxCustomRequest(cat, url);
    }else if (cat.trim() == "district"){
      var url = "/people/traditional_authority_for?filter_value=" + tstInputTarget.value + "&search_string=";
      ajaxCustomRequest(cat, url);
    }
  }

  function ajaxCustomRequest(cat, aUrl) {

    var httpRequest = new XMLHttpRequest();
    httpRequest.onreadystatechange = function() {
      handleCustomResult(cat, httpRequest);
    };
    try {
      httpRequest.open('GET', aUrl, true);
      httpRequest.send(null);
    } catch(e){
    }
  }

  function handleCustomResult(cat, aXMLHttpRequest) {
    if (!aXMLHttpRequest) return;

    if (aXMLHttpRequest.readyState == 4 && (aXMLHttpRequest.status == 200 ||
      aXMLHttpRequest.status == 304)) {

      var result = aXMLHttpRequest.responseText;
      values_hash["region"] = tstInputTarget.value;
      values_hash["district"] = '';

      if (cat == "region"){

        var data = result.split("|");

        var ul = document.createElement("ul");

        for(var i = 0; i < data.length; i ++){

          var li = document.createElement("li")
          li.setAttribute("class", "district");
          li.value = data[i]
          li.innerHTML = data[i]
          li.onmousedown = function(){
            updateCustomTouchscreenInput(this);
          }
    
          ul.appendChild(li);
        }
    __$("sc2").innerHTML = ""
        __$("sc2").appendChild(ul);
      }
    }
  }

  function verifyFields(num){

    if (values_hash['district'] == ''){
      values_hash["temp_region"] = values_hash["region"];
      values_hash["region"] = "";
      region_terminal = false;
    }else{
      values_hash["temp_region"] = "";
      region_terminal = true;
    }
        
    if (num == 1){

      __$("address2").value = values_hash["district"];
      __$("region_region_name").value = values_hash["region"];
    }else if (num == 2){

      __$("state_province").value = values_hash["district"];
      __$("filter_region").value = values_hash["region"];
    }
    tstInputTarget.value = values_hash["region"];
    values_hash["region"] = values_hash["temp_region"];
   
  }

  function updateCustomTouchscreenInput(element){
    
    values_hash["district"] = element.innerHTML;
    var inputTarget = tstInputTarget;

    if (element.value.length>1)
      inputTarget.value = element.value;
    else if (element.innerHTML.length>1)
      inputTarget.value = element.innerHTML;

    highlightSelection(element.parentNode.childNodes, inputTarget);
    tt_update(inputTarget);
  }

  function updateInputFields(){
    if (value.trim() != tstInputTarget.value.trim()){
    
      value = tstInputTarget.value;
      if (value.length > 0 && value.match(/region|Foreign/i)) {
    ajaxify("region", value);
      }
    }

    if (region_terminal == false){
      setTimeout("updateInputFields()", 100);
    }
  }

  function ajaxifyDistricts(){
    value = tstInputTarget.value
    region_terminal = false;

    //clear previous selections
    __$("clearButton").onmousedown.apply(__$("clearButton"));
    setTimeout("updateInputFields()", 30)
    
    __$("viewport").style.width = "48%";
    __$("viewport").style.borderStyle = "solid";
    __$("viewport").style.borderWidth = "2px";
    __$("viewport").style.borderTop = "hidden";
    __$("viewport").style.borderLeft = "hidden";
    __$("viewport").style.borderBottom = "hidden";

    var view2 = document.createElement("div");
    view2.id = "viewport2"
    view2.setAttribute("class", "options");
    view2.style.position = "absolute";
    view2.style.top = "15.35%";
    view2.style.left = "50%";
    view2.style.width = "48%";
    view2.style.borderStyle = "solid";
    view2.style.borderWidth = "2px";
    view2.style.borderTop = "hidden";
    view2.style.borderLeft = "hidden";
    view2.style.borderBottom = "hidden";
    view2.style.borderRight = "hidden";

    var sc2 = document.createElement("div");
    sc2.setAttribute("class", "scrollable");
    sc2.setAttribute("referstotouchscreeninputid", tstCurrentPage + 1);
    sc2.id = "sc2";
    view2.appendChild(sc2);
    __$("inputFrame" + tstCurrentPage).appendChild(view2);
  }

  function showSummary(field){

    if(field == "year"){

      __$('helpText' + tstCurrentPage).innerHTML = __$('helpText' + tstCurrentPage).innerHTML +
          ("  &nbsp;&nbsp;<span style='font-style: italic;'>(??/??/" + __$("person_birth_year").value + ")</span>");

    }else if (field == "day"){

      var months = ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "Unknown"];

      __$('helpText' + tstCurrentPage).innerHTML = __$('helpText' + tstCurrentPage).innerHTML +
          ("  &nbsp;&nbsp;<span style='font-style: italic;'>(??/" + months[__$("person_birth_month").value] + "/" + __$("person_birth_year").value +
          ")</span>");
    }
  }

</script>

<% ask_for_father_details = CoreService.get_global_property_value("father_details") rescue 'false'
  %>
  <% if ask_for_father_details == true %>

  <% form_for :person, @person, :url => { :action => "create_father" } do |f| %>

  <%= hidden_field_tag "encounter[encounter_type_name]", "REGISTRATION" %>
  <%= hidden_field_tag "encounter[encounter_datetime]", (session[:datetime] ?
      session[:datetime].to_date.strftime("%Y-%m-%d %H:%M:%S") : Time.now) %>
  <%= hidden_field_tag "encounter[provider_id]", session[:user_id] %>
  <%= hidden_field_tag :patient, params[:patient_id] %>

  <%= text_field_tag "person[names][given_name]", params[:given_name],
  {:id => 'given_name',
   :field_type => 'alpha',
   :helpText => 'Father First name',
   :ajaxURL => '/person_names/given_names?search_string=',
   :allowFreeText => true,
   :condition => '$("given_name").value == "" || skipped[tstCurrentPage] == 1',
   :tt_onLoad => 'seen(tstCurrentPage);'
  } %>

  <%= text_field_tag "person[names][family_name]", params[:family_name],
  {:id => 'family_name',
   :field_type => 'alpha',
   :helpText => 'Father Last name',
   :ajaxURL => '/person_names/family_names?search_string=',
   :allowFreeText => true,
   :condition => '$("family_name").value == "" || skipped[tstCurrentPage] == 1',
   :tt_onLoad => 'seen(tstCurrentPage);'
  } %>

  Gender:
  <%= f.select :gender, options_for_select([["", ""], ["Male", "M"], ["Female", "F"]], "M"),
  {:selected => "M"},
  {:id => 'gender',
   :helpText => 'Gender',
   :condition => 'false/*$("gender").value == "" || skipped[tstCurrentPage] == 1*/',
   :tt_onLoad => 'seen(tstCurrentPage);'
  }  %>

  <%= text_field_tag "person[names][middle_name]", params[:middle_name],
  {:id => 'middle_name',
   :field_type => 'alpha',
   :helpText => 'Father Middle name',
   :ajaxURL => '/person_names/middle_name?search_string=',
   :allowFreeText => true,
   :condition => '$("middle_name").value == "" || skipped[tstCurrentPage] == 1',
   :tt_pageStyleClass => "azButton",
   :tt_onLoad => 'seen(tstCurrentPage);'
  } if ask_middle_name %>

  <%= text_field_tag "person[birth_year]", nil,
  {:helpText => 'Father Year of Birth',
   :field_type => 'number',
   :absoluteMin => ((session[:datetime] || Date.today).to_date.year - 55),
   :min => ((session[:datetime] || Date.today).to_date.year - 50),
   :max => ((session[:datetime] || Date.today).to_date.year - 10),
   :absoluteMax => ((session[:datetime] || Date.today).to_date.year - 13),
   :tt_pageStyleClass => "Numeric NumbersOnly",
   :tt_onLoad => 'seen(tstCurrentPage);',
   :validationJS => "setDOB();"
  }  %>
  <% i = 0 %>


  <%= select_tag "person[birth_month]", options_for_select(@month_names),
  {:helpText => 'Month of Birth',
   :condition => '$("person_birth_year").value.toLowerCase() != "unknown"',
   :validationJS => "validateDOB();",
   :tt_onLoad => "selectAll = false;  showSummary('year')",
   :tt_pageStyleClass => "longSelectList NoKeyboard",
   :validationMessage => 'Please enter a valid date'
  } %>

  <%= text_field_tag "person[birth_day]",  nil,
   :field_type => 'number',
   :helpText => 'Birth Day',
   :condition => '($("person_birth_year").value != "Unknown") && ($("person_birth_month").value != "Unknown")',
   :tt_onLoad => "getDayOfMonthPicker($('person_birth_year').value, $('person_birth_month').value); showSummary('day'); showNext();" ,
   :validationJS => "validateDOB()",
   :validationMessage => 'Please enter a valid date'%>

  <%= text_field_tag "person[age_estimate]", nil, 
  {:helpText => 'Age Estimate',
   :absoluteMin => 13,
   :absoluteMax => 55,
   :field_type => 'number',
   :condition => '$("person_birth_year").value == "Unknown"',
   :tt_onLoad => "$('nextButton').style.display = 'block';",
   :tt_pageStyleClass => "Numeric NumbersOnly"
  } %>

  <%= select_tag("person[citizenship]",
    options_for_select([" ", "Malawian", "Other"], params[:citizenship]),
    :helpText =>"Nationality",
    :tt_onLoad => "showNext(); seen(tstCurrentPage); "
  ) %>

  <%= text_field_tag "person[race]",  nil, :field_type => 'text',
    :helptext => "Specify nationality",
    :allowFreeText => true,
    :ajaxURL => "/people/static_nationalities?&search_string=",
    :tt_onLoad => "$('nextButton').style.display = 'block';",
    :condition => '($("person_citizenship").value != "Malawian")'%>
  <p><label for="region_region_name">Region of Origin</label></br>

    <%= text_field "region" , 'region_name', :helpText => 'Home address',
      :condition => '($("person_citizenship").value == "Malawian")',
      :tt_pageStyleClass => "NoKeyboard",
      :ajaxURL => '/people/region/Region?field=role&value=',
      :tt_BeforeUnLoad => "verifyFields(1)",
      :tt_onLoad => "showNext(); ajaxifyDistricts();" if ask_home_village %></p>

  <%= text_field_tag "person[addresses][address2]", params[:address2], {:id => 'address2',
    :ajaxURL => '', :field_type => 'alpha',
    :helpText => 'Home District', :allowFreeText => false,
    :condition => 'false',
    :tt_onLoad => "seen(tstCurrentPage);" } if ask_home_village %>

  <%= text_field_tag "p['address2_a']" , nil, {id => 'address2_a',
    :tt_onUnLoad => '$("address2").value = $("address2_a").value',
    :condition => '(($("address2").value == "Other") && ($("person_citizenship").value == "Malawian"))',
    :id => 'address2_a',
    :tt_requireNextClick => true,
    :ajaxURL => '/person_addresses/address2?search_string=',
    :allowFreeText => true,
    :field_type => 'alpha',
    :helpText => 'Specify Home District',
    :tt_onLoad => "$('nextButton').style.display = 'block';" } if ask_home_village %>

  <%= text_field "person[addresses]" , 'county_district',
    :condition => '($("address2").value != "Other") && ($("person_citizenship").value == "Malawian")',
    :helpText => 'Ancestral Traditional Authority (T/A) or area of residence',
    :tt_requireNextClick => false, :ajaxURL => '', :tt_pageStyleClass => "azButton",
    :tt_onLoad => "set_ajaxURL_for_suggestions('/people/traditional_authority/TraditionalAuthority?filter_value='
    ,document.getElementById('address2').value);$('nextButton').style.display = 'none';" if ask_home_village  %></p>

  <%= text_field_tag "person[addresses][neighborhood_cell]", params[:city_village],
    {
    :field_type => 'alpha',
    :helpText => "Home Village",
    :tt_requireNextClick => false,
    :condition => '($("person_citizenship").value == "Malawian")',
    :tt_pageStyleClass => "azButton",
    :ajaxURL => '/people/village?search_string=',
    :allowFreeText => false ,
    :tt_onLoad => "set_ajaxURL_for_suggestions('/people/village/Village?filter_value=' ,document.getElementById('person_addresses_county_district').value);$('nextButton').style.display = 'none';"}%>


  <%= text_field "p[addresses]" , 'county_district_a', :tt_onUnLoad => '$("person_addresses_county_district").value = $("p_addresses_county_district_a").value', :condition => '$("address2").value == "Other"', :ajaxURL => '/person_addresses/traditional_authority?search_string=' , :helpText => 'Specify Ancestral Traditional Authority (T/A) or area of residence' , :tt_pageStyleClass => "azButton", :allowFreeText => true, :tt_onLoad => "$('nextButton').style.display = 'block';" if ask_home_village   %></p>

  <p><label for="filter_region">Current Region</label></br>
    <%= text_field "filter" , 'region', :helpText => 'Current Address',
      :ajaxURL => '/people/region/Region?field=role&foreign=true&value=',
      :tt_pageStyleClass => "NoKeyboard",
      :tt_BeforeUnLoad => "verifyFields(2)",
      :tt_onUnLoad => "if ($('filter_region').value == 'Foreign'){ $('person_addresses_city_village').value = $('state_province').value}",
      :tt_onLoad => "showNext(); ajaxifyDistricts();" %></p>


  <%= text_field_tag "person[addresses][state_province]", params[:state_province], {
    :id => 'state_province',
    :condition => "false"
  } %>

  <p><label for="filter_t_a">Traditional Authority (T/A) or area of residence</label></br>

    <%= text_field "filter" , 't_a',
                   :condition => '$("state_province").value != "Other" && $("filter_region").value != "Foreign"',
                   :helpText => 'Traditional Authority (T/A) or area of residence',
                   :tt_requireNextClick => false,
                   :ajaxURL => '',
                   :tt_pageStyleClass => "azButton",
                   :tt_onLoad => "set_ajaxURL_for_suggestions('/people/traditional_authority/TraditionalAuthority?filter_value=' ,document.getElementById('state_province').value);$('nextButton').style.display = 'none';" %></p>

  <%= text_field "filter" , 't_a_a', :tt_onUnLoad => 'if ($("t_a_a")) {$("t_a").value = $("t_a_a").value}',
                 :condition => '$("state_province").value == "Other" && $("filter_region").value != "Foreign"', :ajaxURL => '/person_addresses/traditional_authority?search_string=', :tt_pageStyleClass => "azButton", :allowFreeText => true,  :helpText => 'Specify Traditional Authority (T/A) or area of residence', :tt_onLoad => "$('nextButton').style.display = 'block';" %></p>


  <%= text_field_tag "person[addresses][city_village]", params[:city_village],
    {:condition => '$("filter_t_a").value != "Other" && $("filter_region").value != "Foreign"',
    :field_type => 'alpha',
    :helpText => 'Location/Village',
    :tt_requireNextClick => false,
    :tt_pageStyleClass => "azButton",
    :ajaxURL => '/people/village?search_string=',
    :allowFreeText => false , :tt_onLoad => "set_ajaxURL_for_suggestions('/people/village/Village?filter_value=' ,document.getElementById('filter_t_a').value);$('nextButton').style.display = 'none';"}%>

  <%= text_field_tag "p[addresses][city_village_a]", params[:city_village_a],
    {:tt_onUnLoad => '$("person_addresses_city_village").value = $("p_addresses_city_village_a").value',
    :condition => '$("filter_t_a").value == "Other"' ,
    :ajaxURL => '/person_addresses/village?search_string=',
    :allowFreeText => true, :field_type => 'alpha',
    :helpText => 'Specify Location/Village',
    :tt_pageStyleClass => "azButton",
    :tt_requireNextClick => true, :tt_onLoad => "$('nextButton').style.display = 'block';"}%>


  <%= text_field_tag "person[addresses][address1]",  params[:address1],
    { :id => 'address1',
    :helpText => 'Closest Landmark',
    :tt_requireNextClick => false,
    :condition => '$("state_province").value != "Other" && $("filter_region").value != "Foreign"',
    :ajaxURL => '/people/landmark?filter_value=',
    :tt_pageStyleClass => "NoKeyboard",
    :tt_onLoad => "hideNext()"
    #:tt_onLoad => "set_ajaxURL_for_suggestions('/people/landmark?filter_value=' ,document.getElementById('person_addresses_city_village').value);$('nextButton').style.display = 'block';"
  }%>

  <%= text_field_tag "p[addresses][address1]",  nil,
    { :id => 'address1_1',
    :helpText => 'Specify Closest Landmark or Plot Number',
    :condition => "__$('address1').value == 'Other'",
    :tt_onUnLoad => "__$('address1').value = __$('address1_1').value",
    :tt_onLoad => "showNext()"
    #:tt_onLoad => "set_ajaxURL_for_suggestions('/people/landmark?filter_value=' ,document.getElementById('person_addresses_city_village').value);$('nextButton').style.display = 'block';"
  }%>

  <%= text_field_tag "person[cell_phone_number]",  params[:cell_phone_number],
    {
    :field_type => 'number',
    :tt_onLoad => "showNext()",
    :helpText => 'Cell Phone Number',
    :validationRule => "^0\\d{7}$|Unknown|Not Available|N\/A|^0\\d{9}$",
    :validationMessage => "Not a valid phone number",
    :tt_pageStyleClass => "nota",
    :id => 'cellphone'
  }
%>

  <% ask_multiple_phone_numbers = get_global_property_value("ask.multiple.phone.numbers") rescue 'false'
  if ask_multiple_phone_numbers == 'true'
  %>
    <%= text_field_tag "person[office_phone_number]",  params[:office_phone_number],
      {
      :field_type => 'number',
      :helpText => 'Office Phone Number',
      :tt_onLoad => "showNext()",
      :validationRule => "^0\\d{7}$|Unknown|Not Available|^0\\d{9}$",
      :validationMessage => "Not a valid phone number"
    }
  %>

    <%= text_field_tag "person[home_phone_number]",  params[:home_phone_number],
      {
      :field_type => 'number',
      :helpText => 'Home Phone Number',
      :tt_onLoad => "showNext()",
      :validationRule => "^0\\d{7}$|Unknown|Not Available|^0\\d{9}$",
      :validationMessage => "Not a valid phone number"
    }
  %>
  <%else%>
    <%= text_field_tag "person[home_phone_number]",  params[:home_phone_number], {
      :field_type => 'number',
      :helpText => 'Ground Phone Number',
      :allowFreeText => true,
      :tt_onLoad => "showNext()",
      :tt_pageStyleClass => "nota",
      :validationRule => "^0\\d{7,9}$|Unknown|Not Available|N\/A",
      :validationMessage => "Not a valid phone number" } if ask_ground_phone%>
  <%end%>

  <%= select_tag("person[occupation]", options_for_select(@occupations ,params[:occupation]),
    :helpText =>"Occupation",
    :id => "occupation",
    :allowFreeText => false,
    :tt_pageStyleClass => "NoKeyboard",
    :tt_onLoad => "seen(tstCurrentPage); selectAll = false; createSingleSelectControl('')",
    :ttMatchFromBeginning => "true")%>


   <%end%>
  
  <%end%>
